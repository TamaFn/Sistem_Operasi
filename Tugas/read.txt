l# Kelompok D11 - SISOP D 
## 5025211196 - Sandyatama Fransisna Nugraha
## 5025211105 - Sarah Nurhasna Khairunnisa
## 5025211148 - Katarina Inezita Prambudi

<br>
<br>

# Soal 1 

Bocchi hendak melakukan University Admission Test di Jepang. Bocchi ingin masuk ke universitas yang bagus. Akan tetapi, dia masih bingung sehingga ia memerlukan beberapa strategi untuk melakukan hal tersebut. Untung saja Bocchi menemukan file .csv yang berisi ranking universitas dunia untuk melakukan penataan strategi  : 

<br> 

# 1 A
## Bocchi ingin masuk ke universitas yang bagus di Jepang. Oleh karena itu, Bocchi perlu melakukan survey terlebih dahulu. Tampilkan 5 Universitas dengan ranking tertinggi di Jepang.
<br>

<br> 

```R
grep Japan university.csv | sort -k 1 -n |head -n 5
```

<br>

## Langkah yang dilakukan  :


<br> 

## 1). Untuk mencari universitas yang paling bagus di jepang, maka harus dilakukan pencarian dengan kata kunci `"Japan"`. Kemudian, dapat menggunakan syntax berikut :

<br>

```R
grep Japan university.csv
```

`grep` : perintah dasar untuk mencari sebuah kata dalam kasus ini adalah kata "Japan"

`university.csv` : nama file dalam ekstensi (csv)

<br> 

## 2). Mencari universitas tertinggi di jepang dapat dilakukan dengan melakukan sorting menggunakan syntax berikut :
<br> 

```R
sort -k 1 -n 
```

`sort` : perintah dasar untuk mengurutkan baris

`-k 1` : perintah untuk melakukan pengurutan berdasarkan kolom ke 1

`-n` : perintah untuk melakukan pengurutan dari terendah ke tertinggi

<br> 

## 3). Untuk menampilkan 5 Universitas bisa menggunakan syntax berikut :

<br> 

```R
head -n 5
```

<br>

Hasil yang didapatkan adalah sebagai berikut : (Hasil Screenshot 1 A)

<br> 

![cronjobs](1a.png)

<br> 



# 1 B
## Karena Bocchi kurang percaya diri dengan kemampuannya, coba cari Faculty Student Score(fsr score) yang paling rendah diantara 5 Universitas di Jepang.

## Langkah yang dilakukan :
<br>

``` R
grep Japan university.csv | sort -n -t ';' -k 9 | head -n 5
```
<br>

## 1. Untuk mencari universitas di jepang maka harus dilakukan pencarian dengan kata kunci "Japan". Kemudian, dapat menggunakan syntax berikut :

<br>

```R
grep Japan university.csv
```

<br>

`grep` : perintah dasar untuk mencari sebuah kata dalam kasus ini adalah kata "Japan"

`university.csv` : nama file dalam ekstensi (csv)

<br>

## 2.  Mencari Faculty Student Score(fsr score) yang paling rendah dapat dilakukan dengan melakukan sorting menggunakan syntax berikut :

<br>

```R
sort -n -t ';' -k 9 
```
<br>

`sort` : perintah dasar untuk mengurutkan baris

`-k 9` : perintah untuk melakukan pengurutan berdasarkan kolom ke 9

`-n` : perintah untuk melakukan pengurutan dari terendah ke tertinggi

`-t ';'` : perintah untuk memberi tau bahwa pemisah antar kolom berupa ; 

<br>

## 3. Untuk menampilkan 5 Universitas bisa menggunakan syntax berikut :

<br>

```R
head -n 5
```
<br>

Hasil yang didapatkan adalah sebagai berikut : (Hasil Screenshot 1 B)

<br>

![cronjobs](1b.png)

<br>

# 1.C
## Karena Bocchi takut salah membaca ketika memasukkan nama universitas, cari 10 Universitas di Jepang dengan Employment Outcome Rank(ger rank) paling tinggi.

<br>

## Langkah - Langkah 

<br>

```R
grep Japan university.csv | sort -n -t ';' -k 20 | head -n 10
```
<br>

## 1. Untuk mencari universitas di jepang maka harus dilakukan pencarian dengan kata kunci "Japan". Kemudian, dapat menggunakan syntax berikut :

<br>

```R
grep Japan university.csv
```

<br>

`grep` : perintah dasar untuk mencari sebuah kata dalam kasus ini adalah kata "Japan"

`university.csv` : nama file dalam ekstensi (csv)

<br>

## 2. Mencari Universitas di Jepang dengan Employment Outcome Rank(ger rank) paling tinggi dapat dilakukan dengan melakukan sorting menggunakan syntax berikut :

<br>

```R
sort -n -t ';' -k 20 
```

<br>

`sort` : perintah dasar untuk mengurutkan baris

`-k 20` : perintah untuk melakukan pengurutan berdasarkan kolom ke 9

`-n` : perintah untuk melakukan pengurutan dari terendah ke tertinggi

`-t ';'` : perintah untuk memberi tau bahwa pemisah antar kolom berupa ; 

<br>

## 3. Untuk menampilkan 10 Universitas bisa menggunakan syntax berikut :

<br>

```R
head -n 10
```
<br>

Hasil yang didapatkan adalah sebagai berikut : (Hasil Screenshot 1 c)

<br>

![cronjobs](1c.png)

<br>

# 1 D
## Bocchi ngefans berat dengan universitas paling keren di dunia. Bantu bocchi mencari universitas tersebut dengan kata kunci keren.

<br>

## Langkah - Langkah 

<br>

## 1. Untuk mencari paling keren di dunia maka harus dilakukan pencarian dengan kata kunci "Keren". Kemudian, dapat menggunakan syntax berikut :

<br>

```R
grep 'Keren' university.csv
```

<br>

Hasil yang didapatkan adalah sebagai berikut : (Hasil Screenshot 1 d)

<br>

![cronjobs](1d.png)

<br>

# Soal2

Kobeni ingin pergi ke negara terbaik di dunia bernama Indonesia. Akan tetapi karena uang Kobeni habis untuk beli headphone ATH-R70x, Kobeni tidak dapat melakukan hal tersebut. 

Untuk melakukan coping, Kobeni mencoba menghibur diri sendiri dengan mendownload gambar tentang Indonesia. Coba buat script untuk mendownload gambar sebanyak `X` kali dengan X sebagai jam sekarang (ex: pukul `16:09` maka `X` nya adalah `16` dst. Apabila pukul `00:00` cukup download `1` gambar saja). Gambarnya didownload setiap `10 jam sekali` mulai dari saat script dijalankan. Adapun ketentuan file dan folder yang akan dibuat adalah sebagai berikut:

1. File yang didownload memilki format nama `“perjalanan_NOMOR.FILE”` Untuk `NOMOR.FILE`, adalah urutan file yang download (`perjalanan_1`, `perjalanan_2`, dst)
File batch yang didownload akan dimasukkan ke dalam folder dengan format nama `“kumpulan_NOMOR.FOLDER”` dengan `NOMOR.FOLDER` adalah urutan folder saat dibuat `(kumpulan_1, kumpulan_2, dst)` 

2. Karena Kobeni uangnya habis untuk reparasi mobil, ia harus berhemat tempat penyimpanan di komputernya. Kobeni harus melakukan zip setiap `1 hari` dengan nama zip `“devil_NOMOR ZIP”` dengan `NOMOR.ZIP` adalah urutan folder saat dibuat `(devil_1, devil_2, dst)`. Yang di ZIP hanyalah folder kumpulan dari soal di atas.

# Langkah yang dilakukan : 
## 1. Mencari angka jam saat ini
```R
#!/bin/bash

# Mengambil angka jam saat ini
Hour=$(date +%k)

if [ "$Hour" == "0" ]
then 
  img_total=1
else
  img_total=$Hour
fi
```

Ini digunakan untuk mendapatkan angka jam pada saat ini. Lalu menggunakan fungsi if else dengan fungsi apabila angka jam menunjukkan angka `0`, maka `img_total` akan menjadi `1` (`img_total` adalah variable yang digunakan untuk jumlah download gambar). Apabila angka jam menunjukkan angka `16`, maka akan mendownload gambar sebanyak `16` kali.

=====================================================================================
## 2. Download gambar berdasarkan dari jam saat ini

```R
# Membuat Function make_img untuk mendownload video
make_img(){
i=1
for ((i=1; i<=img_total; i++))
do 
	wget -O "perjalanan_$i.jpg" "https://loremflickr.com/320/240/Indonesia"
done
}
```
Membuat sebuah function dengan nama make_img dengan fungsi mendownload img dari internet menggunakan fungsi wget. Lalu, nama file diganti menjadi `perjalanan_i` dengan i adalah total angka yang didownload secara berurutan.

=====================================================================================
## 3. Membuat function dengan menzip folder yang telah dibuat

```R
# Membuat function make_zip untuk menzip video
make_zip(){
i=1

while [ -d "kumpulan_$i" ]
do
mkdir "devil_$i"
zip -r "devil_$i.zip" "kumpulan_$i"
rm -r "devil_$i"
i=$((i + 1))
done 
}
```

Membuat sebuah function dengan nama make_zip dengan melakukan operasi while loop. While loop akan mengecek apakah ada folder dengan nama `kumpulan_$i`. Apabila terdapat folder dengan nama yang sama, akan membuat sebuah directory baru dengan nama `devil_$i`. Lalu akan menzipkan folder baru dengan fungsi `zip -r`. Selanjutnya akan menghapus folder dengan `nama devil_$i`. Operasi while akan berjalan dengan `i++`. Operasi while selesai 

=====================================================================================
## 4. Membuat function dengan download image
```R
dwn_img(){
i=1
j=$((i + 1))
echo "$j"
while [ $i -le $j ]
do 
 if [ ! -d "kumpulan_$i" ] 
 then 
   mkdir "kumpulan_$i"
   cd "kumpulan_$i"
   make_img
 fi
 if [ -d "kumpulan_$i" ] 
 then
   mkdir "kumpulan_$j"
   cd "kumpulan_$j"
   make_img
   j=$((i + 1))
 fi
i=$((i + 1))
done
cd ..
}
```

Membuat sebuah function dengan nama dwn_img dengan fungsi memanggil function make_img dan membuat folder baru. Operasi ini dimulai dengan while loop dengan mengecek apakah ada folder dengan nama `kumpulan_$i`. Lalu bila folder tidak ada, maka akan membuat folder baru dengan nama `kumpulan_$i`. Selanjutnya akan mengarahkan ke directory `kumpulan_$i` dan memanggil fungsi make_img. Lalu operasi while akan terus berjalan dengan i++

=====================================================================================
## 5. Membuat function dengan menghapus folder yang lama

```R
delete_folder(){
i=1
while [ -d "kumpulan_$i" ] 
do 
 rm -r "kumpulan_$i"
i=$((i + 1)) 
done
}
```

Membuat sebuah function dengan fungsi menghapus folder yang lama demi menghemat penyimpanan. Function ini sama dengan yang diatas dengan perbedaan menggunaan rm -r untuk menghapus folder. 


## 6. Memulai program menu dengan menggunaakan while loop dan switch case. 

```R
while true 
do
echo "=== Soal 2 ==="
echo "Pilih opsi dibawah ini"
echo "1. Download"
echo "2. Zip"
echo "3. Delete Folder"
read -p "Masukkan jawaban : " pilihan
case "$pilihan" in
   "1") dwn_img
   ;;
   "2") make_zip
   ;; 
   "3") delete_folder
   ;; 
   *)   echo "PIlihan tidak valid"
   ;;
  esac
  
done
```

Membuat function dengan memanfaatkan switch case dan while loop sehingga program terus berjalan. User akan memasukkan pilihan-pilhan dalam menu untuk melakukan proses download,zip,hapus dan sebagainya. Ketika user memilih angka 1, maka akan memanggil fungsi dwn_img. Ketika user memilih angka 2, maka akan memanggil fungsi make_zip dan seterusnya. 

## 7. Melakukan metode cron jobs setiap 10 jam sekali

![cronjobs](Cron-Jobs.png)

0 berartikan bahwa waktu akan lewat lebih dari 0 mnt
*/10 berartikan bahwa cron jobs akan mensetting waktu setiap 10 jam sekali


# Soal 3
Peter Griffin hendak membuat suatu sistem register pada script louis.sh dari setiap user yang berhasil didaftarkan di dalam file /users/users.txt. Peter Griffin juga membuat sistem login yang dibuat di script retep.sh

Untuk memastikan password pada register dan login aman, maka ketika proses input passwordnya harus memiliki ketentuan berikut:
* Minimal 8 karakter
* Memiliki minimal 1 huruf kapital dan 1 huruf kecil
* Alphanumeric
* Tidak boleh sama dengan username 
* Tidak boleh menggunakan kata chicken atau ernie

Setiap percobaan login dan register akan tercatat pada log.txt dengan format : YY/MM/DD hh:mm:ss MESSAGE. Message pada log akan berbeda tergantung aksi yang dilakukan user.
* Ketika mencoba register dengan username yang sudah terdaftar, maka message pada log adalah REGISTER: ERROR User already exists
* Ketika percobaan register berhasil, maka message pada log adalah REGISTER: INFO User USERNAME registered successfully
* Ketika user mencoba login namun passwordnya salah, maka message pada log adalah LOGIN: ERROR Failed login attempt on user USERNAME
Ketika user berhasil login, maka message pada log adalah LOGIN: INFO User USERNAME logged in

## Penyelesaian
## 1. louis.sh
***
### a. Membuat file /users/users.txt dan register system di file louis.sh
```R
~$ mkdir /users
~$ touch /users/users.txt

~$ nano louis.sh
```
***
### b. Memasukkan input username dan password user
```R
#!/bin/bash

date=$(date +'%Y-%m-%d %H:%M:%S')

echo -e "\nREGISTER SYSTEM"
echo "Input username:"
read -r username

echo "Input password:"
read  -r password
```
pada bagian `date=$(date +'%Y-%m-%d %H:%M:%S')` berfungsi untuk mendefinisikan date dengan format YYYY-MM-DD H:M:S   yang nantinya akan dimasukkan ke dalam file `log.txt` untuk setiap percobaan login dan register
***
### c. Membuat validate_password
```R
#fungsi untuk memvalidasi password
validate_password(){
	password=$1

	#password minimal 8 karakter
	if [ ${#password} -lt 8 ]
	then
		echo "REGISTER: ERROR Failed password length should be at least 8 characters"
		return 1
	fi

	#password hanya alphanumeric
	#jika ada simbol maka
	if ! echo "$password" | grep -q '^[[:alnum:]]*$'
	then
		echo "REGISTER: ERROR Failed password should contain alphanumeric only"
		return 1
	fi

	#password minimal 1 huruf kapital, 1 huruf kecil, dan 1 angka
	if ! [[ $password =~ [A-Z] ]] || ! [[ $password =~ [a-z] ]] || ! [[ $password =~ [0-9] ]]
	then
    		echo "REGISTER: ERROR Failed password should contain at least one uppercase letter, one lowercase letter, and one digit number"
		return 1
	fi

	return 0
}
```
Fungsi validate_password digunakan untuk mengecek password user dengan ketentuan sebagai berikut:
* Minimal 8 karakter
  ```R
  #password minimal 8 karakter
	if [ ${#password} -lt 8 ]
	then
		echo "REGISTER: ERROR Failed password length should be at least 8 characters"
		return 1
	fi
  ```
  Kode di atas akan mengecek apakah panjang string `$password` lebih kecil dari 8.
  - Jika iya, maka program akan mengeluarkan informasi error
    `REGISTER: ERROR Failed password length should be at least 8 characters` dan `validate_password` akan return 1.
  - Jika tidak, maka `$password` memenuhi syarat minimal 8 karakter dan `validate_password` akan return 0.

* Memiliki minimal 1 huruf kapital dan 1 huruf kecil
  ```R
  if ! [[ $password =~ [A-Z] ]] || ! [[ $password =~ [a-z] ]] || ! [[ $password =~ [0-9] ]]
	then
    		echo "REGISTER: ERROR Failed password should contain at least one uppercase letter, one lowercase letter, and one digit number"
		return 1
	fi

  ```
  Kode di atas akan mengecek apakah `$password` tidak memiliki minimal 1 huruf kapital, 1 huruf kecil, dan 1 digit angka.
  * Jika iya, maka program akan mengeluarkan informasi error `REGISTER: ERROR Failed password should contain at least one uppercase letter, one lowercase letter, and one digit number` dan `validate_password` akan return 1.
  - Jika tidak, maka `$password` memenuhi syarat minimal 1 huruf kapital dan 1 huruf kecil dan `validate_password` akan return 0.
* Alphanumeric
  ```R
  if ! echo "$password" | grep -q '^[[:alnum:]]*$'
	then
		echo "REGISTER: ERROR Failed password should contain alphanumeric only"
		return 1
	fi
  ```
  Kode di atas akan mengecek apakah `$password` memiliki simbol dan bukan alphanumeric.
  * Jika iya, maka program akan mengeluarkan informasi error `REGISTER: ERROR Failed password should contain alphanumeric only` dan `validate_password` akan return 1.
  - Jika tidak, maka `$password` memenuhi syarat alphanumeric dan `validate_password` akan return 0.
***
### d. Melakukan pengecekan apakah username pernah dibuat sebelumnya
```R
#Cek apakah username sudah pernah ada di /users/users.txt
if grep -q "$username" /users/users.txt
then
	echo "REGISTER: ERROR User already exists"
	echo "Please try again"
	echo "$date REGISTER: ERROR User already exists" >> log.txt
else
```
Pada kode di atas, program akan mencari string yang sesuai dengan `$password` di dalam `/users/users.txt`. Jika ditemukan, artinya username sudah pernah digunakan sebelumnya dan user tidak bisa membuat akun menggunakan username tersebut. Program akan mengeluarkan informasi error `REGISTER: ERROR User already exists` dan data waktu user melakukan percobaan register akan disimpan di dalam file `log.txt` sesuai dengan informasi error yang ditampilkan yaitu pada bagian `echo "$date REGISTER: ERROR User already exists" >> log.txt`.
***
### e. Melakukan pengecekan apakah username=password
```R
#cek apakah password = username
	if [ "$password" == "$username" ]
	then
		echo "REGISTER: ERROR Failed password cannot be the same as username"
		echo "Please try again"
```
User tidak bisa membuat password yang sama dengan username, sehingga apabila kode di atas `true`, maka program akan mengeluarkan informasi error `REGISTER: ERROR Failed password cannot be the same as username`.
***
### f. Melakukan pengecekan password=chicken dan password=ernie
```R
#cek apakah password = chicken
if [ "$password" == "chicken" ]
then
	echo "REGISTER: ERROR Failed you can't use 'chicken' as your password"
	echo "Please try again"
else
	#cek apakah password = ernie
	if [ "$password" == "ernie" ]
	then
		echo "REGISTER: ERROR Failed you can't use 'ernie' as your password"
		echo "Please try again"
```
  * Jika `password=chicken` maka program akan mengeluarkan informasi error `REGISTER: ERROR Failed you can't use 'chicken' as your password`
  * Jika `password=ernie` maka program akan mengeluarkan informasi error `REGISTER: ERROR Failed you can't use 'ernie' as your password`
***
### g. Cek validasi password dengan validate_password
```R
#cek validasi password menggunakan fungsi validate_password
if ! validate_password "$password"
then
	echo "Please try again"
else
	#REGISTER BERHASIL
  	echo "REGISTER: INFO User $username registered successfully"
	echo "$date REGISTER: INFO User $username registered successfully" >> log.txt
	echo "username: $username, password: $password" >> /users/users.txt
fi
```
Pada kode di atas tanda `!` menandakan bahwa validate_password akan nilai returnnya adalah false atau 0. Artinya password memenuhi semua persyaratan yang ada di validate_password. Apabila semua persyaratan telah terpenuhi, maka user berhasil melakukan registrasi. Log akan ditambahkan sesuai dengan waktu dan informasi yang dikeluarkan serta akan disimpan di dalam file `log.txt`. Terakhir, username dan password user akan disimpan di dalam `users/users.txt`.

=====================================================================================
## 2. retep.sh
***
### a. Membuat login system di file retep.sh
```R
~$ nano retep.sh
```
***
### b. Memasukkan input username dan password dari user
```R
#!/bin/bash

date=$(date +'%Y-%m-%d %H:%M:%S')

echo "Hello! :3"
echo "Do you have an account?y/n?"
echo -n "Answer: "
read -r answer

#jika user menjawab n maka user akan langsung menuju REGISTER SYSTEM
if [ "$answer" == n ]
then
	bash louis.sh
else
	echo -e "\nLOGIN SYSTEM"
	echo "Please input your username:"
	read -r username

	echo "Please input your password:"
	read -r -s password
```
Pada kode di atas, user akan diberi pertanyaan terlebih dahulu, apakah user sudah memiliki akun atau belum.
- Jika n, maka user akan langsung menuju register system pada louis.sh untuk melakukan registrasi.
- jika y, maka user akan memasukkan input username dan password
***
### c. Melakukan pengecekan kembali apakah username benar-benar ada pada file /users/users.txt
```R
#Cek kembali apakah user benar-benar sudah memiliki akun
	Check_Username=$(awk '/'"$username"'/ {print 1}' /users/users.txt)
	if [[ $Check_Username -ne 1 ]]
	then
		echo "LOGIN: ERROR Failed you haven't registered yet/wrong username"
		echo "$date LOGIN: ERROR Failed login attempt on user $username" >> log.txt

		echo -e "\nGo to register system? y/n?"
		echo -n "Answer: "
		read -r command

		if [ "$command" == y ]
		then
			bash louis.sh
		else
			exit
		fi
```
Pada kode di atas, pengecekan username menggunakan `awk` untuk mencari string `$username` pada /users/users.txt dan jika ditemukan maka `Check_Username` akan bernilai 1.
- Jika `Check_Username -ne 1`, artinya Check_Username tidak sama dengan 1, maka program akan mengeluarkan informasi error `LOGIN: ERROR Failed you haven't registered yet/wrong username` dan informasi tersebut akan disimpan ke dalam file `log.txt` sesuai dengan `date` nya. User juga bisa menuju register system untuk membuat akun baru.
***
### d. Melakukan pengecekan password
```R
else
		#Cek apakah password sesuai
        	if grep -q "$username" /users/users.txt && grep -q "$password" /users/users.txt
        	then
			#LOGIN BERHASIL
                	echo "LOGIN: INFO User $username logged in"
                	echo "$date LOGIN: INFO User $username logged in" >> log.txt
        	else
                	echo "LOGIN: ERROR Failed login attempt on user $username"
                	echo "$date LOGIN: ERROR Failed login attempt on user $username" >> log.txt
		fi
	fi
fi
```
Kode di atas akan dieksekusi jika `Check_Username = 1` dan digunakan untuk mengecek apakah password yang dimasukkan oleh user sudah sesuai dengan data yang ada pada `/users/users.txt`. 
- Jika sesuai, maka login berhasil dan program akan mengeluarkan informasi `LOGIN: INFO User $username logged in`. Data waktu dan informasi login akan disimpan ke dalam file `log.txt`.
- Jika tidak sesuai, maka program akan mengeluarkan informasi error `LOGIN: ERROR Failed login attempt on user $username`. Data waktu dan informasi error login akan disimpan ke dalam file `log.txt.`


<br>


# Soal 4


# Soal 4
Johan Liebert adalah orang yang sangat kalkulatif. Oleh karena itu ia mengharuskan dirinya untuk mencatat log system komputernya. File syslog tersebut harus memiliki ketentuan : 
- Backup file log system dengan format jam:menit tanggal:bulan:tahun (dalam format .txt).
- Isi file harus dienkripsi dengan string manipulation yang disesuaikan dengan jam dilakukannya backup seperti berikut:
    - Menggunakan sistem cipher dengan contoh seperti berikut. Huruf b adalah alfabet kedua, sedangkan saat ini waktu menunjukkan pukul 12, sehingga huruf b diganti dengan huruf alfabet yang memiliki urutan ke 12+2 = 14
    - Hasilnya huruf b menjadi huruf n karena huruf n adalah huruf ke empat belas, dan seterusnya.
    - Setelah huruf z akan kembali ke huruf a
- Buat juga script untuk dekripsinya.
- Backup file syslog setiap 2 jam untuk dikumpulkan
---
## Penyelesaian
## 1. Buat file log_encrypt.sh
```R
~/Documents/Soal4$ nano log_encrypt.sh
```
---
## 2. Buat file enkripsi sesuai dengan format jam:menit tanggal:bulan:tahun dalam txt
```R
#!/bin/bash

# membuat file enkripsi sesuai dengan format jam:menit tanggal:bulan:tahun (dalam format .txt)
encrypt_file="$(date +'%H:%M %d-%m-%Y').txt"
# membuat variabel hour yang berisi jam saat ini
hour="$(date +'%H')"
# variabel hour menggunakan format 24 jam sehingga ada kemungkinan jam ditulis 01-09
# maka variabel shift digunakan untuk menghapus angka 0 di depan jam
shift="${hour#0}"
```
---
## 3. Buat loop untuk membaca setiap character pada `/var/log/syslog` dan melakukan enkripsi pada setiap character yang dibaca
```R
# melakukan loop untuk membaca file yang akan di enkripsi
# -n1 menyatakan bahwa program akan membaca setiap 1 karakter yang ada di file
while read -r -n1 char
do
    # convert setiap input huruf ke dalam bentuk ASCII
    ascii_char=$(printf '%d' "'$char'")
    # jika char merupakan huruf kapital
    if [[ $char =~ [A-Z] ]]
    then 
        # maka 
        # 1) ascii_char - 65 --> 65 adalah ASCII dari huruf A, untuk mengubah range code dari 65-90(ASCII A-Z) menjadi 0-25
        # 2) + shift --> menjalankan metode cipher
        # 3) % 26 --> di modulo 26 untuk memastikan hasilnya tidak lebih dari range 0-25
        # 4) + 65 --> agar hasilnya kembali ke dalam bentuk ASCII uppercase
        encrypt_uppercase=$(( ("$ascii_char" - 65 + "$shift")%26 + 65 ))
        # mengganti huruf pada variabel char dengan huruf yang sudah dienkripsi
        char=$(printf '%b' "$(printf '\\x%x' "$encrypt_uppercase")")
    #jika char merupakan huruf kecil    
    elif [[ $char =~ [a-z] ]] 
    then
        # maka 
        # 1) ascii_char - 97 --> 97 adalah ASCII dari huruf a, untuk mengubah range code dari 97-112(ASCII a-z) menjadi 0-25
        # 2) + shift --> menjalankan metode cipher
        # 3) % 26 --> di modulo 26 untuk memastikan hasilnya tidak lebih dari range 0-25
        # 4) + 65 --> agar hasilnya kembali ke dalam bentuk ASCII lowercase
        encrypt_lowercase=$(( ("$ascii_char" - 97 + "$shift")%26 + 97 ))
        char=$(printf '%b' "$(printf '\\x%x' "$encrypt_lowercase")")
    fi
    #print char sebagai string
    printf '%s' "$char"
#file yang ingin dienkrisi berada pada directory /var/log/syslog dan akan di simpan pada file "$encrypt_file" 
done < /var/log/syslog > /home/sarahnrhsna/Documents/Soal4/encrypt_file/"$encrypt_file"
```
Algoritma enkripsi yang digunakan adalah dengan menggunakan sistem cipher, sehingga kita harus melakukan shift setiap character dengan jam file tersebut dibuat. Untuk dapat menjumlahkan character, gunakan ASCII dari setiap character alphabet, baik uppercase (65-90) maupun lowercase (97-112).

Contoh:

Jika ascii_char = A dan jam = 2 maka

ascii untuk huruf A adalah 65

encrypt_uppercase = (65 - 65 + 2 + 26)%26 + 65 = 2 + 65 = 67

ascii 67 adalah C.

---
## 4. Buat file log_decrypt.sh

```R
~/Documents/Soal4$ nano log_decrypt.sh
```
---
## 5. Masukkan input nama file yang ingin di dekripsi
```R
#!/bin/bash

#masukkan input nama file yang ingin di deskripsi
echo "Type the filename:"
read -r filename
```
---
## 6. Buat file dekripsi
```R
decrypt_file="$(date +'%H:%M %d-%m-%Y')_decrypted-$filename"
# jam yangd digunakan adalah jam pada file enkripsi sehingga harus melakukan cut simulai dari simbol ":" agar hasil yang didapat hanya bagian hour saja
hour="$(echo "$filename" | cut -d ':' -f 1)"
shift="${hour#0}"
```
Untuk hour yang digunakan untuk deskripsi file harus menggunakan data jam pada filename enkripsi, sehingga harus mengambil data jam saja pada filename enkripsi dengan melakukan `hour="$(echo "$filename" | cut -d ':' -f 1)"`. 

Contoh:

nama file yang akan dienkripsi : `09:33 09-03-2023.txt`

maka file akan di cut dimulai dari simbol `:` sampai akhir sehingga hanya tersisa 09 saja. Agar angka 0 di depan angka 9 hilang, maka dilakukan `"${hour#0}"`.

---
## 7. Buat loop untuk membaca setiap character pada file yang ingin di enkripsi dan melakukan dekripsi pada setiap character yang dibaca
```R
while read -r -n1 char
do
    ascii_char=$(printf '%d' "'$char'")
    if [[ $char =~ [A-Z] ]]
    then 
        decrypt_uppercase=$(( ("$ascii_char" - 65 - "$shift" + 26 )% 26 + 65  ))
        char=$(printf '%b' "$(printf '\\x%x' "$decrypt_uppercase")")
    elif [[ $char =~ [a-z] ]] 
    then
        decrypt_lowercase=$(( ("$ascii_char" - 97 - "$shift" + 26 )% 26 + 97 ))
        char=$(printf '%b' "$(printf '\\x%x' "$decrypt_lowercase")")
    fi
    printf '%s' "$char"
done < /home/sarahnrhsna/Documents/Soal4/encrypt_file/"$filename" > /home/sarahnrhsna/Documents/Soal4/decrypt_file/"$decrypt_file"
```
Pada deskripsi, code untuk melakukan looping sama saja seperti pada enkripsi, hanya berbeda pada bagian 
```R
decrypt_uppercase=$(( ("$ascii_char" - 65 - "$shift" + 26 )% 26 + 65  ))

decrypt_lowercase=$(( ("$ascii_char" - 97 - "$shift" + 26 )% 26 + 97 ))
```
untuk mengembalikan character seperti semula maka harus dilakukan `- "$shift" + 26`

Contoh:

Jika ascii_char = C dan jam = 2 maka

ascii untuk huruf C adalah 67

decrypt_uppercase = (67 - 65 - 2 + 26)%26 + 65 = 0 + 65 = 65

ascii 65 adalah A.

---
## 8. Buat cron jobs agar file enkripsi dapat di jalankan setiap 2 jam
```R
# cron jobs:
~$ crontab -e

0 */2 * * * /home/sarahnrhsna/Documents/Soal4/encrypt_file/log_encrypt.sh
```
---
---
## Dokumentasi Output
## 1. Output log_encrypt

## 2. Output log_decrypt

## 3. Cron Jobs

---
Kendala yang terjadi dalam mengerjakan soal ini yaitu pada saat melakukan enkripsi dan dekripsi, output yang dihasilkan tidak sesuai dengan yang diinginkan karena masih ada kesalahan pada code yang dibuat.